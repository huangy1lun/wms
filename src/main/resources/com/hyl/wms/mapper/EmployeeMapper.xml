<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hyl.wms.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="com.hyl.wms.domain.Employee" >
    <id column="id" property="id" />
    <result column="name" property="name" />
    <result column="password" property="password" />
    <result column="email" property="email" />
    <result column="age" property="age" />
    <result column="admin" property="admin" />
    <association property="dept" javaType="com.hyl.wms.domain.Department" columnPrefix="d_">
      <id property="id" column="id"/>
      <result property="name" column="name"/>
      <result property="sn" column="sn"/>
    </association>
    <collection property="roleList" ofType="com.hyl.wms.domain.Role" column="id"
    select="com.hyl.wms.mapper.RoleMapper.queryByEmployeeId"/>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from `employee`
    where id = #{id}
  </delete>

  <insert id="insert" parameterType="com.hyl.wms.domain.Employee" useGeneratedKeys="true" keyProperty="id" >
    insert into `employee` (name, password, email, age, admin, dept_id)
    values (#{name}, #{password}, #{email}, #{age}, #{admin}, #{dept.id})
  </insert>

  <update id="updateByPrimaryKey" parameterType="com.hyl.wms.domain.Employee" >
    update `employee`
    set name = #{name},
      email = #{email},
      age = #{age},
      admin = #{admin},
      dept_id = #{dept.id}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    SELECT e.id,e.name, e.password, e.email, e.age, e.admin,
    d.id AS d_id, d.name AS d_name,d.sn AS d_sn
    FROM employee e LEFT JOIN department d ON  e.dept_id = d.id
    where e.id = #{id}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, name, password, email, age, admin, dept_id
    from `employee`
  </select>

  <sql id="where_sql">
    <where>
      <if test="keyword != null and keyword !=''">
        AND (e.name LIKE CONCAT('%',#{keyword},'%') OR e.email LIKE CONCAT('%',#{keyword},'%'))
      </if>
      <if test="deptId > -1">
        AND dept_id = #{deptId}
      </if>
    </where>
  </sql>

  <select id="queryForCount" resultType="int">
    SELECT COUNT(e.id)
    FROM employee e LEFT JOIN department d ON  e.dept_id = d.id
    <include refid="where_sql"/>
  </select>

  <select id="queryForList" resultMap="BaseResultMap">
    SELECT e.id,e.name, e.password, e.email, e.age, e.admin,
    d.id AS d_id, d.name AS d_name,d.sn AS d_sn
    FROM employee e LEFT JOIN department d ON  e.dept_id = d.id
    <include refid="where_sql"/>
    ORDER BY e.id
    LIMIT #{startIndex},#{pageSize}
  </select>

  <delete id="deleteRelationEmployeeAndRole">
    DELETE FROM employee_role WHERE employee_id = #{id}
  </delete>

    <insert id="insertRelationEmployeeAndRole">
    INSERT INTO employee_role (employee_id, role_id) VALUES (#{eId},#{rId})
  </insert>

  <select id="checkLoginByUsername" resultType="com.hyl.wms.domain.Employee">
    SELECT id,name,password,admin
    FROM employee
    WHERE name = #{name}
  </select>
  <select id="checkLoginByUser" resultType="com.hyl.wms.domain.Employee">
    SELECT id,name,password,admin
    FROM employee
    WHERE name = #{name} AND password = #{password}
  </select>

  <delete id="batchDelete">
    DELETE FROM employee
    WHERE id IN
    <foreach collection="ids" item="id" separator="," open="(" close=")">
        ${id}
    </foreach>

  </delete>
  <delete id="batchDeleteRelationEmployeeAndRole">
    DELETE FROM employee_role
    WHERE employee_id IN
    <foreach collection="ids" item="id" separator="," open="(" close=")">
      ${id}
    </foreach>
  </delete>

</mapper>